#!/usr/bin/env python

import math
import matplotlib.pyplot as plt

def main():
  x = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0]
  y = [0.8298160792195828, 0.6925252153913596, 0.6920100499363546, 0.6919793192876244, 0.691852212612796, 0.6915696186839926, 0.69081602037653, 0.689080327461678, 0.6855736625087322, 0.6807537655511823, 0.667048570262496, 0.6381420927175953, 0.6218858965335436, 0.5940733914315439, 0.5718304288280405, 0.5713272492170728, 0.5689950323429458, 0.5622575156833408, 0.547539385582486, 0.5207554554907012, 0.4573655040665938, 0.39099156769153515, 0.3728753789983046, 0.35993838961343394, 0.3592222900749839, 0.3582880709125961, 0.35270551559137814, 0.3427632836421802, 0.32869326396951243, 0.3159228705149795, 0.30916418329574624, 0.3075759797370771, 0.30735529610721296, 0.3070570067098703, 0.3053525175760029, 0.30338782906114997, 0.3009224499646084, 0.2923418021633638, 0.28936849771347767, 0.2877260781040641, 0.28699866309718564, 0.28560123980866203, 0.2829604966318255, 0.2791220277812717, 0.2738638821751554, 0.26948927339974055, 0.26895418319932135, 0.26857549125400487, 0.2683652481269675, 0.267696249332297, 0.26692680246365347, 0.2663976092188838, 0.2654293269050549, 0.26403606894952786, 0.26293287102810226, 0.26239993415375973, 0.26170274145908307, 0.2612190743193576, 0.26050163106136087, 0.25979428778312746, 0.25952373503273307, 0.25918430524138214, 0.2587573390747293, 0.258588804224083, 0.25781856157240146, 0.2563763606126463, 0.2553427646962268, 0.25434577766411626, 0.2533612615219194, 0.2525788019452704, 0.2522609634258844, 0.252049155908947, 0.25162377651535917, 0.25151797721764313, 0.2506671217188856, 0.2491969320927374, 0.2480349781058423, 0.24757331865346005, 0.24734286749319437, 0.24728959976094486]
  extra_x = [81.0, 82.0, 83.0, 84.0, 85.0]
  extra_y = [0.2471489362256026, 0.24694214090870156, 0.24659388223346662, 0.2461012822029186, 0.24589411903920694]
  (a, b, c, d) = (-0.09255445944564239, 353.9556285978336, -23868.460553855726, 0.24750669063971317)
  plot_one_over_x_squared(x, y, extra_x, extra_y, a, b, c, d)

def plot(call_func, x, y, extra_x, extra_y, nice_string, *params):
  #x = x[70:]; y = y[70:]
  fitted_y = [call_func(xx) for xx in x + extra_x]
  fig = plt.figure()
  ax = fig.add_subplot(1, 1, 1)
  ax.plot(x, y, "x", label="orig")
  ax.plot(x + extra_x, fitted_y, label="fitted")
  ax.plot(extra_x, extra_y, "x", label="future")
  ax.set_xlabel("Iteration")
  ax.set_ylabel("Loss")
  ax.text(10, 0.75, nice_string)
  plt.savefig("output.png")

def one_over_x(x, a, b, c): return 1 / (a * x + b) + c

def one_over_x_squared(x, a, b, c, d): return 1 / (a * math.pow(x, 2) + b * x + c) + d

def one_over_x_to_the_k(x, a, b, c, k): return 1 / (a * math.pow(x, k) + b) + c

def one_over_exponential(x, a, b): return math.exp(-1 * a * x) + b

def plot_one_over_x(x, y, extra_x, extra_y, a, b, c):
  call_func = lambda x: one_over_x(x, a, b, c, d)
  nice_string = "1 / (ax + b) + c\na = %s\nb = %s\nc = %s" % (a, b, c)
  plot(call_func, x, y, extra_x, extra_y, nice_string, a, b, c)

def plot_one_over_x_squared(x, y, extra_x, extra_y, a, b, c, d):
  call_func = lambda x: one_over_x_squared(x, a, b, c, d)
  nice_string = "1 / (ax^2 + bx + c) + d\na = %s\nb = %s\nc = %s\nd = %s" % (a, b, c, d)
  plot(call_func, x, y, extra_x, extra_y, nice_string, a, b, c, d)

def plot_one_over_x_to_the_k(x, y, extra_x, extra_y, a, b, c, k):
  call_func = lambda x: one_over_x_to_the_k(x, a, b, c, k)
  nice_string = "1 / (ax^k + b) + c\na = %s\nb = %s\nc = %s\nk = %s" % (a, b, c, k)
  plot(call_func, x, y, extra_x, extra_y, nice_string, a, b, c, k)

def plot_one_over_exponential(x, y, extra_x, extra_y, a, b):
  call_func = lambda x: one_over_exponential(x, a, b)
  nice_string = "exp(-ax) + b\na = %s\nb = %s" % (a, b)
  plot(call_func, x, y, extra_x, extra_y, nice_string, a, b)

if __name__ == "__main__":
  main()

